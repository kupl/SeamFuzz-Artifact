diff --git a/ext/phar/util.c b/ext/phar/util.c
index 53982b0f85..296a8767e5 100644
--- a/ext/phar/util.c
+++ b/ext/phar/util.c
@@ -1599,13 +1599,18 @@ int phar_verify_signature(php_stream *fp, size_t end_of_phar, uint32_t sig_type,
 		case PHAR_SIG_SHA512: {
 			unsigned char digest[64];
 			PHP_SHA512_CTX context;
-
+		#ifdef MAGMA_ENABLE_FIXES
 			if (sig_len < sizeof(digest)) {
 				if (error) {
 					spprintf(error, 0, "broken signature");
 				}
 				return FAILURE;
 			}
+		#else
+           // MAGMA_LOG("%MAGMA_BUG%",sig_len < sizeof(digest));
+           assert(!(sig_len < sizeof(digest)));
+           
+		#endif
 
 			PHP_SHA512Init(&context);
 			read_len = end_of_phar;
@@ -1639,13 +1644,18 @@ int phar_verify_signature(php_stream *fp, size_t end_of_phar, uint32_t sig_type,
 		case PHAR_SIG_SHA256: {
 			unsigned char digest[32];
 			PHP_SHA256_CTX context;
-
+		#ifdef MAGMA_ENABLE_FIXES
 			if (sig_len < sizeof(digest)) {
 				if (error) {
 					spprintf(error, 0, "broken signature");
 				}
 				return FAILURE;
 			}
+			#else
+           // MAGMA_LOG("%MAGMA_BUG%",sig_len < sizeof(digest));
+           assert(!(sig_len < sizeof(digest)));
+           
+		#endif
 
 			PHP_SHA256Init(&context);
 			read_len = end_of_phar;
@@ -1679,13 +1689,19 @@ int phar_verify_signature(php_stream *fp, size_t end_of_phar, uint32_t sig_type,
 		case PHAR_SIG_SHA1: {
 			unsigned char digest[20];
 			PHP_SHA1_CTX  context;
-
+		#ifdef MAGMA_ENABLE_FIXES
 			if (sig_len < sizeof(digest)) {
 				if (error) {
 					spprintf(error, 0, "broken signature");
 				}
 				return FAILURE;
 			}
+			#else
+           // MAGMA_LOG("%MAGMA_BUG%",sig_len < sizeof(digest));
+           assert(!(sig_len < sizeof(digest)));
+          
+		#endif
+
 
 			PHP_SHA1Init(&context);
 			read_len = end_of_phar;
@@ -1719,13 +1735,19 @@ int phar_verify_signature(php_stream *fp, size_t end_of_phar, uint32_t sig_type,
 		case PHAR_SIG_MD5: {
 			unsigned char digest[16];
 			PHP_MD5_CTX   context;
-
+		#ifdef  MAGMA_ENABLE_FIXES
 			if (sig_len < sizeof(digest)) {
 				if (error) {
 					spprintf(error, 0, "broken signature");
 				}
 				return FAILURE;
 			}
+			#else
+           // MAGMA_LOG("%MAGMA_BUG%",sig_len < sizeof(digest));
+           assert(!(sig_len < sizeof(digest)));
+           
+		#endif
+
 
 			PHP_MD5Init(&context);
 			read_len = end_of_phar;
diff --git a/ext/phar/zip.c b/ext/phar/zip.c
index e086354b11..530fd2cd2f 100644
--- a/ext/phar/zip.c
+++ b/ext/phar/zip.c
@@ -425,11 +425,22 @@ foundit:
 			php_stream_seek(fp, sizeof(phar_zip_file_header) + entry.header_offset + entry.filename_len + PHAR_GET_16(zipentry.extra_len), SEEK_SET);
 			sig = (char *) emalloc(entry.uncompressed_filesize);
 			read = php_stream_read(fp, sig, entry.uncompressed_filesize);
+		#ifdef MAGMA_ENABLE_FIXES
 			if (read != entry.uncompressed_filesize || read <= 8) {
 				php_stream_close(sigfile);
 				efree(sig);
 				PHAR_ZIP_FAIL("signature cannot be read");
 			}
+		#else
+			if (read != entry.uncompressed_filesize) {
+				php_stream_close(sigfile);
+				efree(sig);
+				PHAR_ZIP_FAIL("signature cannot be read");
+			}
+           // MAGMA_LOG("%MAGMA_BUG%",read <= 8);
+           assert(!(read <= 8));
+           
+		#endif
 			mydata->sig_flags = PHAR_GET_32(sig);
 			if (FAILURE == phar_verify_signature(sigfile, php_stream_tell(sigfile), mydata->sig_flags, sig + 8, entry.uncompressed_filesize - 8, fname, &mydata->signature, &sig_len, error)) {
 				efree(sig);
