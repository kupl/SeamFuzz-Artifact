--- a/parser.c
+++ b/parser.c
@@ -96,12 +96,6 @@ xmlCreateEntityParserCtxtInternal(const xmlChar *URL, const xmlChar *ID,
 
 static void xmlHaltParser(xmlParserCtxtPtr ctxt);
 
-static int
-xmlParseElementStart(xmlParserCtxtPtr ctxt);
-
-static void
-xmlParseElementEnd(xmlParserCtxtPtr ctxt);
-
 /************************************************************************
  *									*
  *	Arbitrary limits set in the parser. See XML_PARSE_HUGE		*
@@ -1828,6 +1822,7 @@ nodePop(xmlParserCtxtPtr ctxt)
     return (ret);
 }
 
+#ifdef LIBXML_PUSH_ENABLED
 /**
  * nameNsPush:
  * @ctxt:  an XML parser context
@@ -1863,11 +1858,6 @@ nameNsPush(xmlParserCtxtPtr ctxt, const xmlChar * value,
 	    goto mem_error;
         }
 	ctxt->pushTab = tmp2;
-    } else if (ctxt->pushTab == NULL) {
-        ctxt->pushTab = (xmlStartTag *) xmlMalloc(ctxt->nameMax *
-                                            sizeof(ctxt->pushTab[0]));
-        if (ctxt->pushTab == NULL)
-            goto mem_error;
     }
     ctxt->nameTab[ctxt->nameNr] = value;
     ctxt->name = value;
@@ -1879,7 +1869,6 @@ mem_error:
     xmlErrMemory(ctxt, NULL);
     return (-1);
 }
-#ifdef LIBXML_PUSH_ENABLED
 /**
  * nameNsPop:
  * @ctxt: an XML parser context
@@ -9634,10 +9634,21 @@ xmlParseEndTag2(xmlParserCtxtPtr ctxt, const xmlChar *prefix,
     SKIP(2);
 
     curLength = ctxt->input->end - ctxt->input->cur;
+#ifdef MAGMA_ENABLE_FIXES
     if ((tlen > 0) && (curLength >= (size_t)tlen) &&
         (xmlStrncmp(ctxt->input->cur, ctxt->name, tlen) == 0)) {
         if ((curLength >= (size_t)(tlen + 1)) &&
 	    (ctxt->input->cur[tlen] == '>')) {
+#else
+    // MAGMA_LOG("AAH037", MAGMA_AND(tlen > 0, curLength < (size_t)tlen));
+    assert(!(tlen > 0 && curLength < (size_t)tlen));
+
+    if ((tlen > 0) && (xmlStrncmp(ctxt->input->cur, ctxt->name, tlen) == 0)) {
+    // MAGMA_LOG("AAH037", curLength == (size_t)tlen); // if curLength < tlen, it will trigger previous canary
+    MAGMA_LOG("AAH037", curLength == (size_t)tlen); // if curLength < tlen, it will trigger previous canary
+#endif
+        if (ctxt->input->cur[tlen] == '>') {
+#endif
 	    ctxt->input->cur += tlen + 1;
 	    ctxt->input->col += tlen + 1;
 	    goto done;
@@ -9816,10 +9816,9 @@ xmlParseCDSect(xmlParserCtxtPtr ctxt) {
 
 void
 xmlParseContent(xmlParserCtxtPtr ctxt) {
-    int nameNr = ctxt->nameNr;
-
     GROW;
     while ((RAW != 0) &&
+	   ((RAW != '<') || (NXT(1) != '/')) &&
 	   (ctxt->instate != XML_PARSER_EOF)) {
 	const xmlChar *test = CUR_PTR;
 	unsigned int cons = ctxt->input->consumed;
@@ -9853,13 +9852,7 @@ xmlParseContent(xmlParserCtxtPtr ctxt) {
 	 * Fourth case :  a sub-element.
 	 */
 	else if (*cur == '<') {
-            if (NXT(1) == '/') {
-                if (ctxt->nameNr <= nameNr)
-                    break;
-	        xmlParseElementEnd(ctxt);
-            } else {
-	        xmlParseElementStart(ctxt);
-            }
+	    xmlParseElement(ctxt);
 	}
 
 	/*
@@ -9894,7 +9887,7 @@ xmlParseContent(xmlParserCtxtPtr ctxt) {
  * xmlParseElement:
  * @ctxt:  an XML parser context
  *
- * parse an XML element
+ * parse an XML element, this is highly recursive
  *
  * [39] element ::= EmptyElemTag | STag content ETag
  *
@@ -9906,23 +9899,6 @@ xmlParseContent(xmlParserCtxtPtr ctxt) {
 
 void
 xmlParseElement(xmlParserCtxtPtr ctxt) {
-    if (xmlParseElementStart(ctxt) != 0)
-        return;
-    xmlParseContent(ctxt);
-    if (ctxt->instate == XML_PARSER_EOF)
-	return;
-    xmlParseElementEnd(ctxt);
-}
-
-/**
- * xmlParseElementStart:
- * @ctxt:  an XML parser context
- *
- * Parse the start of an XML element. Returns -1 in case of error, 0 if an
- * opening tag was parsed, 1 if an empty element was parsed.
- */
-static int
-xmlParseElementStart(xmlParserCtxtPtr ctxt) {
     const xmlChar *name;
     const xmlChar *prefix = NULL;
     const xmlChar *URI = NULL;
@@ -9937,7 +9913,7 @@ xmlParseElementStart(xmlParserCtxtPtr ctxt) {
 		 "Excessive depth in document: %d use XML_PARSE_HUGE option\n",
 			  xmlParserMaxDepth);
 	xmlHaltParser(ctxt);
-	return(-1);
+	return;
     }
 
     /* Capture start position */
@@ -9964,17 +9940,12 @@ xmlParseElementStart(xmlParserCtxtPtr ctxt) {
 	name = xmlParseStartTag(ctxt);
 #endif /* LIBXML_SAX1_ENABLED */
     if (ctxt->instate == XML_PARSER_EOF)
-	return(-1);
+	return;
     if (name == NULL) {
 	spacePop(ctxt);
-        return(-1);
+        return;
     }
-    if (ctxt->sax2)
-        nameNsPush(ctxt, name, prefix, URI, ctxt->nsNr - nsNr);
-#ifdef LIBXML_SAX1_ENABLED
-    else
-        namePush(ctxt, name);
-#endif /* LIBXML_SAX1_ENABLED */
+    namePush(ctxt, name);
     ret = ctxt->node;
 
 #ifdef LIBXML_VALID_ENABLED
@@ -10015,7 +9986,7 @@ xmlParseElementStart(xmlParserCtxtPtr ctxt) {
 	   node_info.node = ret;
 	   xmlParserAddNodeInfo(ctxt, &node_info);
 	}
-	return(1);
+	return;
     }
     if (RAW == '>') {
         NEXT1;
@@ -10043,39 +10014,41 @@ xmlParseElementStart(xmlParserCtxtPtr ctxt) {
 	   node_info.node = ret;
 	   xmlParserAddNodeInfo(ctxt, &node_info);
 	}
-	return(-1);
+	return;
     }
 
-    return(0);
-}
-
-/**
- * xmlParseElementEnd:
- * @ctxt:  an XML parser context
- *
- * Parse the end of an XML element.
- */
-static void
-xmlParseElementEnd(xmlParserCtxtPtr ctxt) {
-    xmlParserNodeInfo node_info;
-    xmlNodePtr ret = ctxt->node;
+    /*
+     * Parse the content of the element:
+     */
+    xmlParseContent(ctxt);
+    if (ctxt->instate == XML_PARSER_EOF)
+	return;
+    if (!IS_BYTE_CHAR(RAW)) {
+        xmlFatalErrMsgStrIntStr(ctxt, XML_ERR_TAG_NOT_FINISHED,
+	 "Premature end of data in tag %s line %d\n",
+		                name, line, NULL);
 
-    if (ctxt->nameNr <= 0)
-        return;
+	/*
+	 * end of parsing of this node.
+	 */
+	nodePop(ctxt);
+	namePop(ctxt);
+	spacePop(ctxt);
+	if (nsNr != ctxt->nsNr)
+	    nsPop(ctxt, ctxt->nsNr - nsNr);
+	return;
+    }
 
     /*
      * parse the end of tag: '</' should be here.
      */
     if (ctxt->sax2) {
-        const xmlChar *prefix = ctxt->pushTab[ctxt->nameNr * 3 - 3];
-        const xmlChar *URI = ctxt->pushTab[ctxt->nameNr * 3 - 2];
-        int nsNr = (ptrdiff_t) ctxt->pushTab[ctxt->nameNr * 3 - 1];
-	xmlParseEndTag2(ctxt, prefix, URI, 0, nsNr, 0);
+	xmlParseEndTag2(ctxt, prefix, URI, line, ctxt->nsNr - nsNr, tlen);
 	namePop(ctxt);
     }
 #ifdef LIBXML_SAX1_ENABLED
-    else
-	xmlParseEndTag1(ctxt, 0);
+      else
+	xmlParseEndTag1(ctxt, line);
 #endif /* LIBXML_SAX1_ENABLED */
 
     /*
@@ -12392,6 +12365,13 @@ xmlCreatePushParserCtxt(xmlSAXHandlerPtr sax, void *user_data,
 	return(NULL);
     }
     ctxt->dictNames = 1;
+    ctxt->pushTab = (void **) xmlMalloc(ctxt->nameMax * 3 * sizeof(xmlChar *));
+    if (ctxt->pushTab == NULL) {
+        xmlErrMemory(ctxt, NULL);
+	xmlFreeParserInputBuffer(buf);
+	xmlFreeParserCtxt(ctxt);
+	return(NULL);
+    }
     if (sax != NULL) {
 #ifdef LIBXML_SAX1_ENABLED
 	if (ctxt->sax != (xmlSAXHandlerPtr) &xmlDefaultSAXHandler)
@@ -14973,6 +14953,16 @@ xmlCtxtResetPush(xmlParserCtxtPtr ctxt, const char *chunk,
 
     xmlCtxtReset(ctxt);
 
+    if (ctxt->pushTab == NULL) {
+        ctxt->pushTab = (void **) xmlMalloc(ctxt->nameMax * 3 *
+	                                    sizeof(xmlChar *));
+        if (ctxt->pushTab == NULL) {
+	    xmlErrMemory(ctxt, NULL);
+            xmlFreeParserInputBuffer(buf);
+            return(1);
+        }
+    }
+
     if (filename == NULL) {
         ctxt->directory = NULL;
     } else {
