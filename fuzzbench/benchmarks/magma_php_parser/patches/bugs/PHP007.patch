diff --git a/ext/phar/phar.c b/ext/phar/phar.c
index 9b21eb7e2a..387e45c560 100644
--- a/ext/phar/phar.c
+++ b/ext/phar/phar.c
@@ -739,13 +739,23 @@ static int phar_parse_pharfile(php_stream *fp, char *fname, size_t fname_len, ch
 	buffer = (char *)emalloc(manifest_len);
 	savebuf = buffer;
 	endbuffer = buffer + manifest_len;
-
+#ifdef MAGMA_ENABLE_FIXES
 	if (manifest_len < MANIFEST_FIXED_LEN || manifest_len != php_stream_read(fp, buffer, manifest_len)) {
 		MAPPHAR_FAIL("internal corruption of phar \"%s\" (truncated manifest header)")
 	}
 
 	/* extract the number of entries */
 	SAFE_PHAR_GET_32(buffer, endbuffer, manifest_count);
+#else
+	if (manifest_len < 10 || manifest_len != php_stream_read(fp, buffer, manifest_len)) {
+		MAPPHAR_FAIL("internal corruption of phar \"%s\" (truncated manifest header)")
+	}
+
+	PHAR_GET_32(buffer, manifest_count);
+   // MAGMA_LOG("%MAGMA_BUG%",buffer + 4 > endbuffer);
+   assert(!(buffer + 4 > endbuffer));
+   
+#endif
 
 	if (manifest_count == 0) {
 		MAPPHAR_FAIL("in phar \"%s\", manifest claims to have zero entries.  Phars must have at least 1 entry");
@@ -764,8 +774,15 @@ static int phar_parse_pharfile(php_stream *fp, char *fname, size_t fname_len, ch
 		}
 		return FAILURE;
 	}
-
+#ifdef MAGMA_ENABLE_FIXES
 	SAFE_PHAR_GET_32(buffer, endbuffer, manifest_flags);
+#else
+	PHAR_GET_32(buffer, manifest_flags);
+
+   // MAGMA_LOG("%MAGMA_BUG%",buffer + 4 > endbuffer);
+   assert(!(buffer + 4 > endbuffer));
+   
+#endif
 
 	manifest_flags &= ~PHAR_HDR_COMPRESSION_MASK;
 	manifest_flags &= ~PHAR_FILE_COMPRESSION_MASK;
@@ -973,13 +990,23 @@ static int phar_parse_pharfile(php_stream *fp, char *fname, size_t fname_len, ch
 	}
 
 	/* extract alias */
+#ifdef MAGMA_ENABLE_FIXES
 	SAFE_PHAR_GET_32(buffer, endbuffer, tmp_len);
-
+#else
+	PHAR_GET_32(buffer, manifest_flags);
+   // MAGMA_LOG("%MAGMA_BUG%",buffer + 4 > endbuffer);
+   assert(!(buffer + 4 > endbuffer));
+   
+#endif
 	if (buffer + tmp_len > endbuffer) {
 		MAPPHAR_FAIL("internal corruption of phar \"%s\" (buffer overrun)");
 	}
-
-	if (manifest_len < MANIFEST_FIXED_LEN + tmp_len) {
+#ifdef MAGMA_ENABLE_FIXES
+	if (manifest_len < MANIFEST_FIXED_LEN + tmp_len)
+#else
+	if (manifest_len < 10 + tmp_len)
+#endif
+	{
 		MAPPHAR_FAIL("internal corruption of phar \"%s\" (truncated manifest header)")
 	}
 
@@ -1017,7 +1044,11 @@ static int phar_parse_pharfile(php_stream *fp, char *fname, size_t fname_len, ch
 	}
 
 	/* we have 5 32-bit items plus 1 byte at least */
+#ifdef MAGMA_ENABLE_FIXES
 	if (manifest_count > ((manifest_len - MANIFEST_FIXED_LEN - tmp_len) / (5 * 4 + 1))) {
+#else
+	if (manifest_count > ((manifest_len - 10 - tmp_len) / (5 * 4 + 1))) {
+#endif
 		/* prevent serious memory issues */
 		MAPPHAR_FAIL("internal corruption of phar \"%s\" (too many manifest entries for size of manifest)")
 	}
@@ -1026,11 +1058,26 @@ static int phar_parse_pharfile(php_stream *fp, char *fname, size_t fname_len, ch
 	mydata->is_persistent = PHAR_G(persist);
 
 	/* check whether we have meta data, zero check works regardless of byte order */
+#ifdef MAGMA_ENABLE_FIXES
 	SAFE_PHAR_GET_32(buffer, endbuffer, len);
+#else
+	PHAR_GET_32(buffer, len);
+   // MAGMA_LOG("%MAGMA_BUG%",buffer + 4 > endbuffer);
+   assert(!(buffer + 4 > endbuffer));
+    
+#endif
+
 	if (mydata->is_persistent) {
 		if (!len) {
 			/* FIXME: not sure why this is needed but removing it breaks tests */
+		#ifdef MAGMA_ENABLE_FIXES
 			SAFE_PHAR_GET_32(buffer, endbuffer, len);
+		#else
+			PHAR_GET_32(buffer, len);
+           // MAGMA_LOG("%MAGMA_BUG%",buffer + 4 > endbuffer);
+           assert(!(buffer + 4 > endbuffer));
+           
+		#endif
 		}
 	}
 	if(len > (size_t)(endbuffer - buffer)) {
