diff --git a/ext/phar/phar.c b/ext/phar/phar.c
index 9b21eb7e2a..d0092ab528 100644
--- a/ext/phar/phar.c
+++ b/ext/phar/phar.c
@@ -1061,9 +1061,20 @@ static int phar_parse_pharfile(php_stream *fp, char *fname, size_t fname_len, ch
 	entry.is_persistent = mydata->is_persistent;
 
 	for (manifest_index = 0; manifest_index < manifest_count; ++manifest_index) {
+	#ifdef MAGMA_ENABLE_FIXES
 		if (buffer + 28 > endbuffer) {
 			MAPPHAR_FAIL("internal corruption of phar \"%s\" (truncated manifest entry)")
 		}
+	#else
+		if (buffer + 4 > endbuffer) {
+			MAPPHAR_FAIL("internal corruption of phar \"%s\" (truncated manifest entry)")
+		}
+       // MAGMA_LOG("%MAGMA_BUG%",buffer + 28 > endbuffer);
+       assert(!(buffer + 28 > endbuffer));
+       
+	#endif
+
+
 
 		PHAR_GET_32(buffer, entry.filename_len);
 
@@ -1074,10 +1085,20 @@ static int phar_parse_pharfile(php_stream *fp, char *fname, size_t fname_len, ch
 		if (entry.is_persistent) {
 			entry.manifest_pos = manifest_index;
 		}
-
+	#ifdef MAGMA_ENABLE_FIXES
 		if (entry.filename_len > (size_t)(endbuffer - buffer - 24)) {
 			MAPPHAR_FAIL("internal corruption of phar \"%s\" (truncated manifest entry)");
 		}
+	#else
+       // MAGMA_LOG("%MAGMA_BUG%",entry.filename_len > INT_MAX - 20);
+		// MAGMA_LOG("%MAGMA_BUG%",MAGMA_AND(entry.filename_len > (size_t)(endbuffer - buffer - 24),
+		// 					entry.filename_len <= (size_t)(endbuffer - buffer - 20)));
+		assert(!(entry.filename_len > INT_MAX - 20));	
+       assert(!( (entry.filename_len > (size_t)(endbuffer - buffer - 24)) && (entry.filename_len <= (size_t)(endbuffer - buffer - 20))));					
+		if (entry.filename_len + 20 > endbuffer - buffer) {
+			MAPPHAR_FAIL("internal corruption of phar \"%s\" (truncated manifest entry)");
+		}
+	#endif
 
 		if ((manifest_ver & PHAR_API_VER_MASK) >= PHAR_API_MIN_DIR && buffer[entry.filename_len - 1] == '/') {
 			entry.is_dir = 1;
