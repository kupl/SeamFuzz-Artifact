--- a/experiment/measurer/run_coverage.py	2023-01-28 05:55:35.781286096 +0900
+++ bfuzzbench/experiment/measurer/run_coverage.py	2023-01-27 06:18:04.629525428 +0900
@@ -29,7 +29,7 @@
 EXIT_BUFFER = 15
 
 # Memory limit for libfuzzer merge.
-RSS_LIMIT_MB = 2048
+RSS_LIMIT_MB = 4096
 
 # Per-unit processing timeout for libfuzzer merge.
 UNIT_TIMEOUT = 10
@@ -55,14 +55,52 @@
     """Does a coverage run of |coverage_binary| on |new_units_dir|. Writes
     the result to |profraw_file_pattern|. Returns a list of crashing units."""
     with tempfile.TemporaryDirectory() as merge_dir:
-        command = [
-            coverage_binary, '-merge=1', '-dump_coverage=1',
-            '-artifact_prefix=%s/' % crashes_dir,
-            '-timeout=%d' % UNIT_TIMEOUT,
-            '-rss_limit_mb=%d' % RSS_LIMIT_MB,
-            '-max_total_time=%d' % (MAX_TOTAL_TIME - EXIT_BUFFER), merge_dir,
-            new_units_dir
-        ]
+        if 'objdump' in coverage_binary:    # for funzzing stand-alone program
+            command = [
+                './objdump_cov', '-merge=1', '-dump_coverage=1',
+                '-artifact_prefix=%s/' % crashes_dir,
+                '-timeout=%d' % UNIT_TIMEOUT,
+                '-rss_limit_mb=%d' % RSS_LIMIT_MB,
+                '-max_total_time=%d' % (MAX_TOTAL_TIME - EXIT_BUFFER), merge_dir,
+                new_units_dir
+            ]        
+        elif 'xmllint' in coverage_binary:  # for fuzzing stand-alone program
+            command = [
+                './xmllint_cov', '-merge=1', '-dump_coverage=1',
+                '-artifact_prefix=%s/' % crashes_dir,
+                '-timeout=%d' % UNIT_TIMEOUT,
+                '-rss_limit_mb=%d' % RSS_LIMIT_MB,
+                '-max_total_time=%d' % (MAX_TOTAL_TIME - EXIT_BUFFER), merge_dir,
+                new_units_dir
+            ]        
+        elif 'infotocap' in coverage_binary:    # for fuzzing stand-alone program
+            command = [
+                './infotocap_cov', '-merge=1', '-dump_coverage=1',
+                '-artifact_prefix=%s/' % crashes_dir,
+                '-timeout=%d' % UNIT_TIMEOUT,
+                '-rss_limit_mb=%d' % RSS_LIMIT_MB,
+                '-max_total_time=%d' % (MAX_TOTAL_TIME - EXIT_BUFFER), merge_dir,
+                new_units_dir
+            ]        
+        elif 'podofo' in coverage_binary:   # for fuzzing stand-alone program
+            command = [
+                './podofo_cov', '-merge=1', '-dump_coverage=1',
+                '-artifact_prefix=%s/' % crashes_dir,
+                '-timeout=%d' % UNIT_TIMEOUT,
+                '-rss_limit_mb=%d' % RSS_LIMIT_MB,
+                '-max_total_time=%d' % (MAX_TOTAL_TIME - EXIT_BUFFER), merge_dir,
+                new_units_dir
+            ]        
+        else:
+            command = [
+                coverage_binary, '-merge=1', '-dump_coverage=1',
+                '-artifact_prefix=%s/' % crashes_dir,
+                '-timeout=%d' % UNIT_TIMEOUT,
+                '-rss_limit_mb=%d' % RSS_LIMIT_MB,
+                '-max_total_time=%d' % (MAX_TOTAL_TIME - EXIT_BUFFER), merge_dir,
+                new_units_dir
+            ]
+
         coverage_binary_dir = os.path.dirname(coverage_binary)
         env = os.environ.copy()
         env['LLVM_PROFILE_FILE'] = profraw_file_pattern
